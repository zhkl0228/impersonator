/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_wolfssl_WolfSSLContext */

#ifndef _Included_com_wolfssl_WolfSSLContext
#define _Included_com_wolfssl_WolfSSLContext
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    newContext
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfssl_WolfSSLContext_newContext
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setTmpDH
 * Signature: (J[BI[BI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setTmpDH
  (JNIEnv *, jobject, jlong, jbyteArray, jint, jbyteArray, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setTmpDHFile
 * Signature: (JLjava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setTmpDHFile
  (JNIEnv *, jobject, jlong, jstring, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    useCertificateFile
 * Signature: (JLjava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_useCertificateFile
  (JNIEnv *, jobject, jlong, jstring, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    usePrivateKeyFile
 * Signature: (JLjava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_usePrivateKeyFile
  (JNIEnv *, jobject, jlong, jstring, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    loadVerifyLocations
 * Signature: (JLjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_loadVerifyLocations
  (JNIEnv *, jobject, jlong, jstring, jstring);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    useCertificateChainFile
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_useCertificateChainFile
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    freeContext
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_freeContext
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setVerify
 * Signature: (JILcom/wolfssl/WolfSSLVerifyCallback;)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setVerify
  (JNIEnv *, jobject, jlong, jint, jobject);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setOptions
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfssl_WolfSSLContext_setOptions
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    getOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfssl_WolfSSLContext_getOptions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    memsaveCertCache
 * Signature: (J[BI[I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_memsaveCertCache
  (JNIEnv *, jobject, jlong, jbyteArray, jint, jintArray);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    memrestoreCertCache
 * Signature: (J[BI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_memrestoreCertCache
  (JNIEnv *, jobject, jlong, jbyteArray, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    getCertCacheMemsize
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_getCertCacheMemsize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setCacheSize
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfssl_WolfSSLContext_setCacheSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    getCacheSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfssl_WolfSSLContext_getCacheSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setCipherList
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setCipherList
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    loadVerifyBuffer
 * Signature: (J[BJI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_loadVerifyBuffer
  (JNIEnv *, jobject, jlong, jbyteArray, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    useCertificateBuffer
 * Signature: (J[BJI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_useCertificateBuffer
  (JNIEnv *, jobject, jlong, jbyteArray, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    usePrivateKeyBuffer
 * Signature: (J[BJI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_usePrivateKeyBuffer
  (JNIEnv *, jobject, jlong, jbyteArray, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    useCertificateChainBuffer
 * Signature: (J[BJ)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_useCertificateChainBuffer
  (JNIEnv *, jobject, jlong, jbyteArray, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    useCertificateChainBufferFormat
 * Signature: (J[BJI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_useCertificateChainBufferFormat
  (JNIEnv *, jobject, jlong, jbyteArray, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setGroupMessages
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setGroupMessages
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setIORecv
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setIORecv
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setIOSend
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setIOSend
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setGenCookie
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setGenCookie
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    enableCRL
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_enableCRL
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    disableCRL
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_disableCRL
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    loadCRL
 * Signature: (JLjava/lang/String;II)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_loadCRL
  (JNIEnv *, jobject, jlong, jstring, jint, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setCRLCb
 * Signature: (JLcom/wolfssl/WolfSSLMissingCRLCallback;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setCRLCb
  (JNIEnv *, jobject, jlong, jobject);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    enableOCSP
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_enableOCSP
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    disableOCSP
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_disableOCSP
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setOCSPOverrideUrl
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setOCSPOverrideUrl
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setMacEncryptCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setMacEncryptCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setDecryptVerifyCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setDecryptVerifyCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setEccSignCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setEccSignCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setEccVerifyCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setEccVerifyCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setEccSharedSecretCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setEccSharedSecretCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setRsaSignCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setRsaSignCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setRsaVerifyCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setRsaVerifyCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setRsaEncCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setRsaEncCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setRsaDecCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setRsaDecCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setPskClientCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setPskClientCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setPskServerCb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_setPskServerCb
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    usePskIdentityHint
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_usePskIdentityHint
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    useSupportedCurve
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_useSupportedCurve
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setGroups
 * Signature: (J[I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setGroups
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    set1SigAlgsList
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_set1SigAlgsList
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    useSecureRenegotiation
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_useSecureRenegotiation
  (JNIEnv *, jobject, jlong);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setMinDhKeySz
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setMinDhKeySz
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setMinRsaKeySz
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setMinRsaKeySz
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setMinEccKeySz
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setMinEccKeySz
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    setDevId
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_wolfssl_WolfSSLContext_setDevId
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     com_wolfssl_WolfSSLContext
 * Method:    flushSessions
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfssl_WolfSSLContext_flushSessions
  (JNIEnv *, jobject, jlong, jint);

#ifdef __cplusplus
}
#endif
#endif
